{"ast":null,"code":"import _slicedToArray from \"/Users/katie/Desktop/Brandon projects/weather_app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/katie/Desktop/Brandon projects/weather_app/client/src/components/WeatherSearch.js\";\nimport React, { useState, useEffect } from \"react\";\nimport useDebounce from \"./useDebounce\";\nimport { Button } from \"@material-ui/core\";\nimport { Carousel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addItem } from \"../actions/itemActions\";\n\nconst WeatherList = ({\n  addItem,\n  isAuthenticated,\n  user\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        weatherData = _useState2[0],\n        setWeatherData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        initialQuery = _useState4[0],\n        setInitialQuery = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        searchTerm = _useState6[0],\n        setSearchTerm = _useState6[1]; //debounce the search term\n\n\n  const debouncedSearchTerm = useDebounce(searchTerm, 700);\n\n  const handleChange = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      getQuery(debouncedSearchTerm);\n    } else {\n      setInitialQuery([]);\n    }\n  }, [debouncedSearchTerm]); // query many cities worldID, only 11 at a time\n\n  async function getQuery(search) {\n    await fetch(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?query=${search}`, {\n      mode: \"no-cors\"\n    }).then(res => res.json()).then(res => setInitialQuery(res.slice(0, 10))).catch(err => {\n      console.error(err);\n    });\n  } // use each worldID to fetch each city weather data\n\n\n  useEffect(() => {\n    setWeatherData([]);\n    const showMoreStuff = false;\n\n    async function getWeather() {\n      Promise.all(initialQuery.map(item => {\n        fetch(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/${item.woeid}/`, {\n          mode: \"no-cors\"\n        }).then(res => res.json()).then(res => setWeatherData(prevArray => [...prevArray, {\n          res,\n          showMoreStuff\n        }])).catch(err => {\n          console.error(err);\n        });\n        return null;\n      }));\n    }\n\n    getWeather();\n  }, [initialQuery]);\n  useEffect(() => {\n    console.log(searchTerm);\n    console.log(weatherData);\n  }, [weatherData, searchTerm]); // onClick to toggle boolean to show more\n  // function handleShow(id) {\n  //   const newData = weatherData.map(item => {\n  //     if (item.res.woeid === id) {\n  //       return {\n  //         ...item,\n  //         showMoreStuff: !item.showMoreStuff\n  //       };\n  //     } else return item;\n  //   });\n  //   setWeatherData(newData);\n  // }\n  // funct to return correct day and month from data\n\n  function getMyDay(day) {\n    const date1 = new Date(day);\n    const dayOfWeekIndex = date1.getDay();\n    const dayNames = [\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sund\"];\n    return dayNames[dayOfWeekIndex];\n  }\n\n  function getMyMonth(month) {\n    const month1 = new Date(month);\n    const dayOfMonthIndex = month1.getMonth();\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n    return monthNames[dayOfMonthIndex];\n  } // add item to dashboard\n\n\n  const onAddItemClick = (item, user) => {\n    const newItem = {\n      name: item.res.title,\n      weathers: item,\n      newID: user._id\n    };\n    addItem(newItem);\n  };\n\n  console.log(user);\n  console.log(weatherData);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Weather\"), user && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"userID: \", user._id), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: searchTerm,\n    onChange: handleChange,\n    placeholder: \"input city search\",\n    className: \"input-weather\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Total found: \", weatherData.length, \" \"), initialQuery.length > 0 && weatherData.length !== initialQuery.length ? React.createElement(\"img\", {\n    src: \"https://media.giphy.com/media/l31p1SkNXGz3l1nwwu/giphy.gif\",\n    alt: \"loading\",\n    className: \"loading-gif\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"all-weather-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, weatherData.map(item => React.createElement(\"div\", {\n    className: \"each-weather\",\n    key: item.res.woeid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"each-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, isAuthenticated === true ? React.createElement(Button, {\n    className: \"weather-button\",\n    variant: \"outlined\",\n    color: \"secondary\",\n    onClick: () => onAddItemClick(item, user),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Add to Saved\") : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Please login to save cities!\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    className: \"each-weather-title\",\n    variant: \"h3\",\n    component: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, item.res.title), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, item.res.timezone), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Time: \", item.res.time.slice(11, 16)), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(Carousel, {\n    interval: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(Carousel.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Today\"), React.createElement(\"img\", {\n    className: \"weather-image\",\n    src: `https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[0].weather_state_abbr}.svg`,\n    alt: \"weather state\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, item.res.consolidated_weather[0].weather_state_name), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, item.res.consolidated_weather[0].the_temp && item.res.consolidated_weather[0].the_temp.toFixed(1)), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Predictability:\", \" \", item.res.consolidated_weather[0].predictability && item.res.consolidated_weather[0].predictability, \"%\")), item.res.consolidated_weather.map((weather, i) => React.createElement(Carousel.Item, {\n    className: \"show-more-each\",\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, i === 0 ? React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"Tomorrow\") : React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, getMyDay(item.res.consolidated_weather[i].applicable_date), \" \", parseInt(item.res.consolidated_weather[i].applicable_date.slice(8, 10)) < 10 ? item.res.consolidated_weather[i].applicable_date.slice(9, 10) : item.res.consolidated_weather[i].applicable_date.slice(8, 10), \" \", getMyMonth(item.res.consolidated_weather[i].applicable_date)), React.createElement(\"img\", {\n    className: \"weather-image\",\n    src: `https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[i].weather_state_abbr}.svg`,\n    alt: \"weather state\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, item.res.consolidated_weather[i].weather_state_name), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, item.res.consolidated_weather[i].the_temp && item.res.consolidated_weather[i].the_temp.toFixed(1), \"C\"), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"Predictability:\", \" \", item.res.consolidated_weather[i].predictability && item.res.consolidated_weather[i].predictability, \"%\")))))))));\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user\n});\n\nexport default connect(mapStateToProps, {\n  addItem\n})(WeatherList);","map":{"version":3,"sources":["/Users/katie/Desktop/Brandon projects/weather_app/client/src/components/WeatherSearch.js"],"names":["React","useState","useEffect","useDebounce","Button","Carousel","connect","addItem","WeatherList","isAuthenticated","user","weatherData","setWeatherData","initialQuery","setInitialQuery","searchTerm","setSearchTerm","debouncedSearchTerm","handleChange","e","target","value","getQuery","search","fetch","mode","then","res","json","slice","catch","err","console","error","showMoreStuff","getWeather","Promise","all","map","item","woeid","prevArray","log","getMyDay","day","date1","Date","dayOfWeekIndex","getDay","dayNames","getMyMonth","month","month1","dayOfMonthIndex","getMonth","monthNames","onAddItemClick","newItem","name","title","weathers","newID","_id","length","timezone","time","consolidated_weather","weather_state_abbr","weather_state_name","the_temp","toFixed","predictability","weather","i","applicable_date","parseInt","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useDebounce from \"./useDebounce\";\nimport { Button } from \"@material-ui/core\";\nimport { Carousel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addItem } from \"../actions/itemActions\";\n\nconst WeatherList = ({ addItem, isAuthenticated, user }) => {\n  const [weatherData, setWeatherData] = useState([]);\n  const [initialQuery, setInitialQuery] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  //debounce the search term\n  const debouncedSearchTerm = useDebounce(searchTerm, 700);\n  const handleChange = e => {\n    setSearchTerm(e.target.value);\n  };\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      getQuery(debouncedSearchTerm);\n    } else {\n      setInitialQuery([]);\n    }\n  }, [debouncedSearchTerm]);\n\n  // query many cities worldID, only 11 at a time\n  async function getQuery(search) {\n    await fetch(\n      `https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?query=${search}`,\n      { mode: \"no-cors\" }\n    )\n      .then(res => res.json())\n      .then(res => setInitialQuery(res.slice(0, 10)))\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  // use each worldID to fetch each city weather data\n  useEffect(() => {\n    setWeatherData([]);\n    const showMoreStuff = false;\n    async function getWeather() {\n      Promise.all(\n        initialQuery.map(item => {\n          fetch(\n            `https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/${item.woeid}/`,\n            { mode: \"no-cors\" }\n          )\n            .then(res => res.json())\n            .then(res =>\n              setWeatherData(prevArray => [\n                ...prevArray,\n                { res, showMoreStuff }\n              ])\n            )\n            .catch(err => {\n              console.error(err);\n            });\n          return null;\n        })\n      );\n    }\n    getWeather();\n  }, [initialQuery]);\n\n  useEffect(() => {\n    console.log(searchTerm);\n    console.log(weatherData);\n  }, [weatherData, searchTerm]);\n  // onClick to toggle boolean to show more\n  // function handleShow(id) {\n  //   const newData = weatherData.map(item => {\n  //     if (item.res.woeid === id) {\n  //       return {\n  //         ...item,\n  //         showMoreStuff: !item.showMoreStuff\n  //       };\n  //     } else return item;\n  //   });\n  //   setWeatherData(newData);\n  // }\n  // funct to return correct day and month from data\n  function getMyDay(day) {\n    const date1 = new Date(day);\n    const dayOfWeekIndex = date1.getDay();\n    const dayNames = [\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sund\"];\n    return dayNames[dayOfWeekIndex];\n  }\n  function getMyMonth(month) {\n    const month1 = new Date(month);\n    const dayOfMonthIndex = month1.getMonth();\n    const monthNames = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"Aug\",\n      \"Sept\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n    return monthNames[dayOfMonthIndex];\n  }\n  // add item to dashboard\n  const onAddItemClick = (item, user) => {\n    const newItem = {\n      name: item.res.title,\n      weathers: item,\n      newID: user._id\n    };\n    addItem(newItem);\n  };\n\n  console.log(user);\n  console.log(weatherData);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Weather</h1>\n      {user && <div>userID: {user._id}</div>}\n\n      <div>\n        <input\n          type=\"text\"\n          value={searchTerm}\n          onChange={handleChange}\n          placeholder=\"input city search\"\n          className=\"input-weather\"\n        />\n      </div>\n\n      <h3>Total found: {weatherData.length} </h3>\n      {initialQuery.length > 0 && weatherData.length !== initialQuery.length ? (\n        <img\n          src=\"https://media.giphy.com/media/l31p1SkNXGz3l1nwwu/giphy.gif\"\n          alt=\"loading\"\n          className=\"loading-gif\"\n        />\n      ) : (\n        <div className=\"all-weather-container\">\n          {weatherData.map(item => (\n            <div className=\"each-weather\" key={item.res.woeid}>\n              <div className=\"each-container\">\n                {isAuthenticated === true ? (\n                  <Button\n                    className=\"weather-button\"\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={() => onAddItemClick(item, user)}\n                  >\n                    Add to Saved\n                  </Button>\n                ) : (\n                  <div>Please login to save cities!</div>\n                )}\n                <br />\n                <h3 className=\"each-weather-title\" variant=\"h3\" component=\"h3\">\n                  {item.res.title}\n                </h3>\n                <h6>{item.res.timezone}</h6>\n                <h6>Time: {item.res.time.slice(11, 16)}</h6>\n                <hr />\n\n                <Carousel interval={0}>\n                  <Carousel.Item>\n                    <h6>Today</h6>\n                    <img\n                      className=\"weather-image\"\n                      src={`https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[0].weather_state_abbr}.svg`}\n                      alt=\"weather state\"\n                    />\n                    <h6>\n                      {item.res.consolidated_weather[0].weather_state_name}\n                    </h6>\n                    <h6>\n                      {item.res.consolidated_weather[0].the_temp &&\n                        item.res.consolidated_weather[0].the_temp.toFixed(1)}\n                    </h6>\n                    <h6>\n                      Predictability:{\" \"}\n                      {item.res.consolidated_weather[0].predictability &&\n                        item.res.consolidated_weather[0].predictability}\n                      %\n                    </h6>\n                  </Carousel.Item>\n\n                  {item.res.consolidated_weather.map((weather, i) => (\n                    <Carousel.Item className=\"show-more-each\" key={i}>\n                      {i === 0 ? (\n                        <h6>Tomorrow</h6>\n                      ) : (\n                        <h6>\n                          {getMyDay(\n                            item.res.consolidated_weather[i].applicable_date\n                          )}{\" \"}\n                          {parseInt(\n                            item.res.consolidated_weather[\n                              i\n                            ].applicable_date.slice(8, 10)\n                          ) < 10\n                            ? item.res.consolidated_weather[\n                                i\n                              ].applicable_date.slice(9, 10)\n                            : item.res.consolidated_weather[\n                                i\n                              ].applicable_date.slice(8, 10)}{\" \"}\n                          {getMyMonth(\n                            item.res.consolidated_weather[i].applicable_date\n                          )}\n                        </h6>\n                      )}\n                      <img\n                        className=\"weather-image\"\n                        src={`https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[i].weather_state_abbr}.svg`}\n                        alt=\"weather state\"\n                      />\n                      <h6>\n                        {item.res.consolidated_weather[i].weather_state_name}\n                      </h6>\n                      <h6>\n                        {item.res.consolidated_weather[i].the_temp &&\n                          item.res.consolidated_weather[i].the_temp.toFixed(1)}\n                        C\n                      </h6>\n                      <h6>\n                        Predictability:{\" \"}\n                        {item.res.consolidated_weather[i].predictability &&\n                          item.res.consolidated_weather[i].predictability}\n                        %\n                      </h6>\n                    </Carousel.Item>\n                  ))}\n                </Carousel>\n                {/* {item.showMoreStuff === false ? (\n                <Button\n                  className=\"weather-button\"\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => handleShow(item.res.woeid)}\n                >\n                  Show more\n                </Button>\n              ) : (\n                <div>\n                  <hr />\n                  <div className=\"show-more-content\">\n                    {item.res.consolidated_weather.map((weather, i) => (\n                      <div className=\"show-more-each\" key={i}>\n                        {i === 0 ? (\n                          <h6>Tomorrow</h6>\n                        ) : (\n                          <h6>\n                            {getMyDay(\n                              item.res.consolidated_weather[i].applicable_date\n                            )}{\" \"}\n                            {parseInt(\n                              item.res.consolidated_weather[\n                                i\n                              ].applicable_date.slice(8, 10)\n                            ) < 10\n                              ? item.res.consolidated_weather[\n                                  i\n                                ].applicable_date.slice(9, 10)\n                              : item.res.consolidated_weather[\n                                  i\n                                ].applicable_date.slice(8, 10)}{\" \"}\n                            {getMyMonth(\n                              item.res.consolidated_weather[i].applicable_date\n                            )}\n                          </h6>\n                        )}\n                        <img\n                          className=\"weather-image\"\n                          src={`https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[i].weather_state_abbr}.svg`}\n                          alt=\"weather state\"\n                        />\n                        <h6>\n                          {item.res.consolidated_weather[i].weather_state_name}\n                        </h6>\n                        <h6>\n                          {item.res.consolidated_weather[i].the_temp &&\n                            item.res.consolidated_weather[i].the_temp.toFixed(\n                              1\n                            )}\n                          C\n                        </h6>\n                        <h6>\n                          Predictability:{\" \"}\n                          {item.res.consolidated_weather[i].predictability &&\n                            item.res.consolidated_weather[i].predictability}\n                          %\n                        </h6>\n                      </div>\n                    ))}\n                  </div>\n                  <Button\n                    className=\"weather-button\"\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={() => handleShow(item.res.woeid)}\n                  >\n                    Show less\n                  </Button>\n                </div>\n              )} */}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user\n});\nexport default connect(mapStateToProps, { addItem })(WeatherList);\n"]},"metadata":{},"sourceType":"module"}