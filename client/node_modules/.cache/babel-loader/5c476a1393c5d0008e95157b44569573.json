{"ast":null,"code":"import _slicedToArray from\"/Users/katie/Desktop/Brandon projects/weather_app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";// Our hook\nexport default function useDebounce(value,delay){// State and setters for debounced value\nvar _useState=useState(value),_useState2=_slicedToArray(_useState,2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];useEffect(function(){// Set debouncedValue to value (passed in) after the specified delay\nvar handler=setTimeout(function(){setDebouncedValue(value);},delay);// Return a cleanup function that will be called every time ...\n// ... useEffect is re-called. useEffect will only be re-called ...\n// ... if value changes (see the inputs array below).\n// This is how we prevent debouncedValue from changing if value is ...\n// ... changed within the delay period. Timeout gets cleared and restarted.\n// To put it in context, if the user is typing within our app's ...\n// ... search box, we don't want the debouncedValue to update until ...\n// ... they've stopped typing for more than 500ms.\nreturn function(){clearTimeout(handler);};},// Only re-call effect if value changes\n// You could also add the \"delay\" var to inputs array if you ...\n// ... need to be able to change that dynamically.\n[value,delay]);return debouncedValue;}","map":{"version":3,"sources":["/Users/katie/Desktop/Brandon projects/weather_app/client/src/components/useDebounce.js"],"names":["useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"+KAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,cAAe,SAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA4BC,KAA5B,CAAmC,CAChD;AADgD,cAEJJ,QAAQ,CAACG,KAAD,CAFJ,wCAEzCE,cAFyC,eAEzBC,iBAFyB,eAIhDL,SAAS,CACP,UAAM,CACJ;AACA,GAAMM,CAAAA,OAAO,CAAGC,UAAU,CAAC,UAAM,CAC/BF,iBAAiB,CAACH,KAAD,CAAjB,CACD,CAFyB,CAEvBC,KAFuB,CAA1B,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,WAAM,CACXK,YAAY,CAACF,OAAD,CAAZ,CACD,CAFD,CAGD,CAlBM,CAmBP;AACA;AACA;AACA,CAACJ,KAAD,CAAQC,KAAR,CAtBO,CAAT,CAyBA,MAAOC,CAAAA,cAAP,CACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// Our hook\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value, delay]\n  );\n\n  return debouncedValue;\n}\n"]},"metadata":{},"sourceType":"module"}