{"ast":null,"code":"import{USER_LOADED,USER_LOADING,AUTH_ERROR,LOGIN_SUCCESS,LOGIN_FAIL,LOGOUT_SUCCESS,REGISTER_SUCCESS,REGISTER_FAIL}from\"./types\";import{returnErrors}from\"./errorActions\";import axios from\"axios\";// check token and load user\nexport var loadUser=function loadUser(){return function(dispatch,getState){// user loading\ndispatch({type:USER_LOADING});axios.get(\"/api/auth/user\",tokenConfig(getState)).then(function(res){return dispatch({type:USER_LOADED,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status));dispatch({type:AUTH_ERROR});});};};// register user\nexport var register=function register(_ref,history){var name=_ref.name,email=_ref.email,password=_ref.password;return function(dispatch){// headers\nvar config={headers:{\"Content-type\":\"application/json\"}};// request body\nvar body=JSON.stringify({name:name,email:email,password:password});axios.post(\"/api/users\",body,config).then(function(res){return dispatch({type:REGISTER_SUCCESS,payload:res.data});}).then(function(res){return history.push(\"/login\");})// re-direct to login on successful register\n.catch(function(err){dispatch({type:REGISTER_FAIL});dispatch(returnErrors(err.response.data,err.response.status,\"REGISTER_FAIL\"));});};};// login user\nexport var login=function login(_ref2,history){var email=_ref2.email,password=_ref2.password;return function(dispatch){// headers\nvar config={headers:{\"Content-type\":\"application/json\"}};// request body\nvar body=JSON.stringify({email:email,password:password});axios.post(\"/api/auth\",body,config).then(function(res){return dispatch({type:LOGIN_SUCCESS,payload:res.data});}).then(function(res){return history.push(\"/\");}).catch(function(err){dispatch({type:LOGIN_FAIL});dispatch(returnErrors(err.response.data,err.response.status,\"LOGIN_FAIL\"));});};};// logout user\nexport var logout=function logout(){return{type:LOGOUT_SUCCESS};};// setup config/headers and token\nexport var tokenConfig=function tokenConfig(getState){// get token from localstorage\nvar token=getState().auth.token;// set headers\nvar config={headers:{\"Content-type\":\"application/json\"}};// if there is token , add to headers\nif(token){config.headers[\"x-auth-token\"]=token;}return config;};","map":{"version":3,"sources":["/Users/katie/Desktop/Brandon projects/weather_app/client/src/actions/authActions.js"],"names":["USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","returnErrors","axios","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","history","name","email","password","config","headers","body","JSON","stringify","post","push","login","logout","token","auth"],"mappings":"AAAA,OACEA,WADF,CAEEC,YAFF,CAGEC,UAHF,CAIEC,aAJF,CAKEC,UALF,CAMEC,cANF,CAOEC,gBAPF,CAQEC,aARF,KASO,SATP,CAUA,OAASC,YAAT,KAA6B,gBAA7B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA;AAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,SAAM,UAACC,QAAD,CAAWC,QAAX,CAAwB,CACpD;AACAD,QAAQ,CAAC,CAAEE,IAAI,CAAEZ,YAAR,CAAD,CAAR,CAEAQ,KAAK,CACFK,GADH,CACO,gBADP,CACyBC,WAAW,CAACH,QAAD,CADpC,EAEGI,IAFH,CAEQ,SAAAC,GAAG,QACPN,CAAAA,QAAQ,CAAC,CACPE,IAAI,CAAEb,WADC,CAEPkB,OAAO,CAAED,GAAG,CAACE,IAFN,CAAD,CADD,EAFX,EAQGC,KARH,CAQS,SAAAC,GAAG,CAAI,CACZV,QAAQ,CAACH,YAAY,CAACa,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR,CACAZ,QAAQ,CAAC,CAAEE,IAAI,CAAEX,UAAR,CAAD,CAAR,CACD,CAXH,EAYD,CAhBuB,EAAjB,CAiBP;AACA,MAAO,IAAMsB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAA4BC,OAA5B,KAAGC,CAAAA,IAAH,MAAGA,IAAH,CAASC,KAAT,MAASA,KAAT,CAAgBC,QAAhB,MAAgBA,QAAhB,OAAwC,UAAAjB,QAAQ,CAAI,CAC1E;AACA,GAAMkB,CAAAA,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAAf,CAKA;AACA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,SAAL,CAAe,CAAEP,IAAI,CAAJA,IAAF,CAAQC,KAAK,CAALA,KAAR,CAAeC,QAAQ,CAARA,QAAf,CAAf,CAAb,CACAnB,KAAK,CACFyB,IADH,CACQ,YADR,CACsBH,IADtB,CAC4BF,MAD5B,EAGGb,IAHH,CAGQ,SAAAC,GAAG,QACPN,CAAAA,QAAQ,CAAC,CACPE,IAAI,CAAEP,gBADC,CAEPY,OAAO,CAAED,GAAG,CAACE,IAFN,CAAD,CADD,EAHX,EASGH,IATH,CASQ,SAAAC,GAAG,QAAIQ,CAAAA,OAAO,CAACU,IAAR,CAAa,QAAb,CAAJ,EATX,CASuC;AATvC,CAWGf,KAXH,CAWS,SAAAC,GAAG,CAAI,CACZV,QAAQ,CAAC,CACPE,IAAI,CAAEN,aADC,CAAD,CAAR,CAGAI,QAAQ,CACNH,YAAY,CAACa,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAyC,eAAzC,CADN,CAAR,CAGD,CAlBH,EAmBD,CA5BuB,EAAjB,CA6BP;AACA,MAAO,IAAMa,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,OAAsBX,OAAtB,KAAGE,CAAAA,KAAH,OAAGA,KAAH,CAAUC,QAAV,OAAUA,QAAV,OAAkC,UAAAjB,QAAQ,CAAI,CACjE;AACA,GAAMkB,CAAAA,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAAf,CAKA;AACA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,SAAL,CAAe,CAAEN,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CAAb,CACAnB,KAAK,CACFyB,IADH,CACQ,WADR,CACqBH,IADrB,CAC2BF,MAD3B,EAGGb,IAHH,CAGQ,SAAAC,GAAG,QACPN,CAAAA,QAAQ,CAAC,CACPE,IAAI,CAAEV,aADC,CAEPe,OAAO,CAAED,GAAG,CAACE,IAFN,CAAD,CADD,EAHX,EASGH,IATH,CASQ,SAAAC,GAAG,QAAIQ,CAAAA,OAAO,CAACU,IAAR,CAAa,GAAb,CAAJ,EATX,EAUGf,KAVH,CAUS,SAAAC,GAAG,CAAI,CACZV,QAAQ,CAAC,CACPE,IAAI,CAAET,UADC,CAAD,CAAR,CAGAO,QAAQ,CACNH,YAAY,CAACa,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAyC,YAAzC,CADN,CAAR,CAGD,CAjBH,EAkBD,CA3BoB,EAAd,CA6BP;AACA,MAAO,IAAMc,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CAC1B,MAAO,CACLxB,IAAI,CAAER,cADD,CAAP,CAGD,CAJM,CAMP;AACA,MAAO,IAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAH,QAAQ,CAAI,CACrC;AACA,GAAM0B,CAAAA,KAAK,CAAG1B,QAAQ,GAAG2B,IAAX,CAAgBD,KAA9B,CAEA;AACA,GAAMT,CAAAA,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAAf,CAKA;AACA,GAAIQ,KAAJ,CAAW,CACTT,MAAM,CAACC,OAAP,CAAe,cAAf,EAAiCQ,KAAjC,CACD,CACD,MAAOT,CAAAA,MAAP,CACD,CAfM","sourcesContent":["import {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\";\n// check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // user loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"/api/auth/user\", tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({ type: AUTH_ERROR });\n    });\n};\n// register user\nexport const register = ({ name, email, password }, history) => dispatch => {\n  // headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  // request body\n  const body = JSON.stringify({ name, email, password });\n  axios\n    .post(\"/api/users\", body, config)\n\n    .then(res =>\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      })\n    )\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n\n    .catch(err => {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\n      );\n    });\n};\n// login user\nexport const login = ({ email, password }, history) => dispatch => {\n  // headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  // request body\n  const body = JSON.stringify({ email, password });\n  axios\n    .post(\"/api/auth\", body, config)\n\n    .then(res =>\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      })\n    )\n    .then(res => history.push(\"/\"))\n    .catch(err => {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\n      );\n    });\n};\n\n// logout user\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\n// setup config/headers and token\nexport const tokenConfig = getState => {\n  // get token from localstorage\n  const token = getState().auth.token;\n\n  // set headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  // if there is token , add to headers\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}