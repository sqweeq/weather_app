{"ast":null,"code":"import { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\"; // check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // user loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"/api/auth/user\", tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}, history) => dispatch => {\n  // headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post(\"/api/users\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n  });\n}; // login user\n\nexport const login = ({\n  email,\n  password\n}, history) => dispatch => {\n  // headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post(\"/api/auth\", body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).then(res => history.push(\"/\")) // re-direct to login on successful register\n  .catch(err => {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(returnErrors(err.response.data !== undefined ? err.response.data : null, err.response.status, \"LOGIN_FAIL\"));\n  });\n}; // logout user\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // get token from localstorage\n  const token = getState().auth.token; // set headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // if there is token , add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/katie/Desktop/Brandon projects/weather_app/client/src/actions/authActions.js"],"names":["USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","returnErrors","axios","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","history","config","headers","body","JSON","stringify","post","push","login","undefined","logout","token","auth"],"mappings":"AAAA,SACEA,WADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,cANF,EAOEC,gBAPF,EAQEC,aARF,QASO,SATP;AAUA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAR;AAEAQ,EAAAA,KAAK,CACFK,GADH,CACO,gBADP,EACyBC,WAAW,CAACH,QAAD,CADpC,EAEGI,IAFH,CAEQC,GAAG,IACPN,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEb,WADC;AAEPkB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,GAAD,CAHZ,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAACH,YAAY,CAACa,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GAXH;AAYD,CAhBM,C,CAiBP;;AACA,OAAO,MAAMsB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,EAA4BC,OAA5B,KAAwCjB,QAAQ,IAAI;AAC1E;AACA,QAAMkB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAF0E,CAO1E;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAER,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;AACAlB,EAAAA,KAAK,CACFyB,IADH,CACQ,YADR,EACsBH,IADtB,EAC4BF,MAD5B,EAGGb,IAHH,CAGQC,GAAG,IACPN,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEP,gBADC;AAEPY,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,GAAD,CAJZ,EASGH,IATH,CASQC,GAAG,IAAIW,OAAO,CAACO,IAAR,CAAa,QAAb,CATf,EASuC;AATvC,GAWGf,KAXH,CAWSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAGAI,IAAAA,QAAQ,CACNH,YAAY,CAACa,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CADN,CAAR;AAGD,GAlBH;AAmBD,CA5BM,C,CA6BP;;AACA,OAAO,MAAMa,KAAK,GAAG,CAAC;AAAEV,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,EAAsBC,OAAtB,KAAkCjB,QAAQ,IAAI;AACjE;AACA,QAAMkB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAFiE,CAOjE;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;AACAlB,EAAAA,KAAK,CACFyB,IADH,CACQ,WADR,EACqBH,IADrB,EAC2BF,MAD3B,EAGGb,IAHH,CAGQC,GAAG,IACPN,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEV,aADC;AAEPe,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,GAAD,CAJZ,EASGH,IATH,CASQC,GAAG,IAAIW,OAAO,CAACO,IAAR,CAAa,GAAb,CATf,EASkC;AATlC,GAUGf,KAVH,CAUSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGAO,IAAAA,QAAQ,CACNH,YAAY,CACVa,GAAG,CAACC,QAAJ,CAAaH,IAAb,KAAsBkB,SAAtB,GAAkChB,GAAG,CAACC,QAAJ,CAAaH,IAA/C,GAAsD,IAD5C,EAEVE,GAAG,CAACC,QAAJ,CAAaC,MAFH,EAGV,YAHU,CADN,CAAR;AAOD,GArBH;AAsBD,CA/BM,C,CAiCP;;AACA,OAAO,MAAMe,MAAM,GAAG,MAAM;AAC1B,SAAO;AACLzB,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMU,WAAW,GAAGH,QAAQ,IAAI;AACrC;AACA,QAAM2B,KAAK,GAAG3B,QAAQ,GAAG4B,IAAX,CAAgBD,KAA9B,CAFqC,CAIrC;;AACA,QAAMV,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CALqC,CAUrC;;AACA,MAAIS,KAAJ,EAAW;AACTV,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCS,KAAjC;AACD;;AACD,SAAOV,MAAP;AACD,CAfM","sourcesContent":["import {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\";\n// check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // user loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"/api/auth/user\", tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({ type: AUTH_ERROR });\n    });\n};\n// register user\nexport const register = ({ name, email, password }, history) => dispatch => {\n  // headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  // request body\n  const body = JSON.stringify({ name, email, password });\n  axios\n    .post(\"/api/users\", body, config)\n\n    .then(res =>\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      })\n    )\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n\n    .catch(err => {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\n      );\n    });\n};\n// login user\nexport const login = ({ email, password }, history) => dispatch => {\n  // headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  // request body\n  const body = JSON.stringify({ email, password });\n  axios\n    .post(\"/api/auth\", body, config)\n\n    .then(res =>\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      })\n    )\n    .then(res => history.push(\"/\")) // re-direct to login on successful register\n    .catch(err => {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch(\n        returnErrors(\n          err.response.data !== undefined ? err.response.data : null,\n          err.response.status,\n          \"LOGIN_FAIL\"\n        )\n      );\n    });\n};\n\n// logout user\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\n// setup config/headers and token\nexport const tokenConfig = getState => {\n  // get token from localstorage\n  const token = getState().auth.token;\n\n  // set headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  // if there is token , add to headers\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}