{"ast":null,"code":"import { useState, useEffect } from \"react\"; // Our hook\n// debounce functions used to make query data smoother with less bugs\n\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Set debouncedValue to value (passed in) after the specified delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Return a cleanup function that will be called every time ...\n    // ... useEffect is re-called. useEffect will only be re-called ...\n    // ... if value changes (see the inputs array below).\n    // This is how we prevent debouncedValue from changing if value is ...\n    // ... changed within the delay period. Timeout gets cleared and restarted.\n    // To put it in context, if the user is typing within our app's ...\n    // ... search box, we don't want the debouncedValue to update until ...\n    // ... they've stopped typing for more than 500ms.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, // Only re-call effect if value changes\n  // You could also add the \"delay\" var to inputs array if you ...\n  // ... need to be able to change that dynamically.\n  [value, delay]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/resume projects/weather_app/client/src/components/useDebounce.js"],"names":["useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;AAEA;;AACA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AAChD;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAACG,KAAD,CAApD;AAEAF,EAAAA,SAAS,CACP,MAAM;AACJ;AACA,UAAMM,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFI,CAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,MAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAlBM,EAmBP;AACA;AACA;AACA,GAACJ,KAAD,EAAQC,KAAR,CAtBO,CAAT;AAyBA,SAAOC,cAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// Our hook\n\n// debounce functions used to make query data smoother with less bugs\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value, delay]\n  );\n\n  return debouncedValue;\n}\n"]},"metadata":{},"sourceType":"module"}