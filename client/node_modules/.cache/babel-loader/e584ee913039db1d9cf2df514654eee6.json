{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\resume projects\\\\weather_app\\\\client\\\\src\\\\components\\\\WeatherSearch.js\";\nimport React, { useState, useEffect } from \"react\";\nimport useDebounce from \"./useDebounce\";\nimport { Button } from \"@material-ui/core\";\nimport { Carousel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addItem } from \"../actions/itemActions\";\n\nconst WeatherList = ({\n  addItem,\n  isAuthenticated,\n  user\n}) => {\n  const [weatherData, setWeatherData] = useState([]);\n  const [initialQuery, setInitialQuery] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [itemToShow, setItemToShow] = useState([]); //debounce the search term\n\n  const debouncedSearchTerm = useDebounce(searchTerm, 700);\n\n  const handleChange = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      getQuery(debouncedSearchTerm);\n    } else {\n      setInitialQuery([]);\n    }\n  }, [debouncedSearchTerm]); // query many cities worldID, only 11 at a time\n\n  async function getQuery(search) {\n    await fetch(`https://cors-anywhere.herokuapp.com/corsdemo/https://www.metaweather.com/api/location/search/?query=${search}`, {\n      method: 'GET',\n      // or 'PUT'\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, DELETE, PUT\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(res => setInitialQuery(res.slice(0, 10))).catch(err => {\n      console.error(err);\n    });\n  } // use each worldID to fetch each city weather data\n\n\n  useEffect(() => {\n    setWeatherData([]);\n    const showMoreStuff = false;\n\n    async function getWeather() {\n      Promise.all(initialQuery.map(item => {\n        fetch(`https://cors-anywhere.herokuapp.com/corsdemo/https://www.metaweather.com/api/location/${item.woeid}/`, {\n          method: 'GET',\n          // or 'PUT'\n          headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, POST, DELETE, PUT\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\",\n            'Content-Type': 'application/json'\n          }\n        }).then(res => res.json()).then(res => setWeatherData(prevArray => [...prevArray, {\n          res,\n          showMoreStuff\n        }])).catch(err => {\n          console.error(err);\n        });\n        return null;\n      }));\n    }\n\n    getWeather();\n  }, [initialQuery]); // funct to return convert day and month from data\n\n  function getMyDay(day) {\n    const date1 = new Date(day);\n    const dayOfWeekIndex = date1.getDay();\n    const dayNames = [\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"];\n    return dayNames[dayOfWeekIndex];\n  }\n\n  function showAdded(i) {\n    const preItemToShow = [...itemToShow, i];\n    setItemToShow(preItemToShow);\n    const newItemShow = itemToShow.filter(item => item !== i);\n    setTimeout(() => {\n      setItemToShow(newItemShow);\n    }, 3500);\n  }\n\n  function getMyMonth(month) {\n    const month1 = new Date(month);\n    const dayOfMonthIndex = month1.getMonth();\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n    return monthNames[dayOfMonthIndex];\n  } // add item to dashboard\n\n\n  const onAddItemClick = (item, user) => {\n    const newItem = {\n      name: item.res.title,\n      weathers: item,\n      newID: user._id\n    };\n    addItem(newItem);\n  }; // console.log(weatherData);\n  // console.log(initialQuery);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \"Weather Hunter\"), user && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 16\n    }\n  }, \"You are logged in!\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: searchTerm,\n    onChange: handleChange,\n    placeholder: \"input city search\",\n    className: \"input-weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"Total found: \", weatherData.length, \" \"), initialQuery.length > 0 && weatherData.length !== initialQuery.length ? /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://media.giphy.com/media/l31p1SkNXGz3l1nwwu/giphy.gif\",\n    alt: \"loading\",\n    className: \"loading-gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"all-weather-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, weatherData.map((item, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"each-weather\",\n    key: item.res.woeid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"each-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, isAuthenticated === true ? /*#__PURE__*/React.createElement(Button, {\n    className: \"weather-button weather-save\",\n    variant: \"outlined\",\n    color: \"secondary\",\n    onClick: () => {\n      showAdded(i);\n      onAddItemClick(item, user);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, itemToShow.includes(i) ? \"Saved\" : \"Add\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }, \"Please login to save cities!\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"each-weather-title\",\n    variant: \"h3\",\n    component: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, item.res.title), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, item.res.timezone), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, \"Time: \", item.res.time.slice(11, 16)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Carousel, {\n    interval: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Carousel.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, \"Today\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"weather-image\",\n    src: `https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[0].weather_state_abbr}.svg`,\n    alt: \"weather state\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, item.res.consolidated_weather[0].weather_state_name), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, item.res.consolidated_weather[0].the_temp && item.res.consolidated_weather[0].the_temp.toFixed(1), \"C\"), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  }, \"Predictability:\", \" \", item.res.consolidated_weather[0].predictability && item.res.consolidated_weather[0].predictability, \"%\")), item.res.consolidated_weather.map((weather, i) => /*#__PURE__*/React.createElement(Carousel.Item, {\n    className: \"show-more-each\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  }, i === 0 ? /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    }\n  }, \"Tomorrow\") : /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 25\n    }\n  }, getMyDay(item.res.consolidated_weather[i].applicable_date), \" \", parseInt(item.res.consolidated_weather[i].applicable_date.slice(8, 10)) < 10 ? item.res.consolidated_weather[i].applicable_date.slice(9, 10) : item.res.consolidated_weather[i].applicable_date.slice(8, 10), \" \", getMyMonth(item.res.consolidated_weather[i].applicable_date)), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"weather-image\",\n    src: `https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[i].weather_state_abbr}.svg`,\n    alt: \"weather state\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 23\n    }\n  }, item.res.consolidated_weather[i].weather_state_name), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 23\n    }\n  }, item.res.consolidated_weather[i].the_temp && item.res.consolidated_weather[i].the_temp.toFixed(1), \"C\"), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 23\n    }\n  }, \"Predictability:\", \" \", item.res.consolidated_weather[i].predictability && item.res.consolidated_weather[i].predictability, \"%\")))))))));\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user\n});\n\nexport default connect(mapStateToProps, {\n  addItem\n})(WeatherList);","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/resume projects/weather_app/client/src/components/WeatherSearch.js"],"names":["React","useState","useEffect","useDebounce","Button","Carousel","connect","addItem","WeatherList","isAuthenticated","user","weatherData","setWeatherData","initialQuery","setInitialQuery","searchTerm","setSearchTerm","itemToShow","setItemToShow","debouncedSearchTerm","handleChange","e","target","value","getQuery","search","fetch","method","headers","then","res","json","slice","catch","err","console","error","showMoreStuff","getWeather","Promise","all","map","item","woeid","prevArray","getMyDay","day","date1","Date","dayOfWeekIndex","getDay","dayNames","showAdded","i","preItemToShow","newItemShow","filter","setTimeout","getMyMonth","month","month1","dayOfMonthIndex","getMonth","monthNames","onAddItemClick","newItem","name","title","weathers","newID","_id","length","includes","timezone","time","consolidated_weather","weather_state_abbr","weather_state_name","the_temp","toFixed","predictability","weather","applicable_date","parseInt","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useDebounce from \"./useDebounce\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Carousel } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../actions/itemActions\";\r\n\r\nconst WeatherList = ({ addItem, isAuthenticated, user }) => {\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  const [initialQuery, setInitialQuery] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [itemToShow, setItemToShow] = useState([]);\r\n  //debounce the search term\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 700);\r\n  const handleChange = e => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    if (debouncedSearchTerm) {\r\n      getQuery(debouncedSearchTerm);\r\n    } else {\r\n      setInitialQuery([]);\r\n    }\r\n  }, [debouncedSearchTerm]);\r\n\r\n  // query many cities worldID, only 11 at a time\r\n  async function getQuery(search) {\r\n    await fetch(\r\n      `https://cors-anywhere.herokuapp.com/corsdemo/https://www.metaweather.com/api/location/search/?query=${search}`, \r\n      {\r\n        method: 'GET', // or 'PUT'\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\":\"*\",\"Access-Control-Allow-Methods\": \"GET, POST, DELETE, PUT\",\r\n          \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(res => setInitialQuery(res.slice(0, 10)))\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  // use each worldID to fetch each city weather data\r\n  useEffect(() => {\r\n    setWeatherData([]);\r\n    const showMoreStuff = false;\r\n    async function getWeather() {\r\n      Promise.all(\r\n        initialQuery.map(item => {\r\n          fetch(\r\n            `https://cors-anywhere.herokuapp.com/corsdemo/https://www.metaweather.com/api/location/${item.woeid}/`, \r\n      {\r\n        method: 'GET', // or 'PUT'\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\", \"Access-Control-Allow-Methods\": \"GET, POST, DELETE, PUT\",\r\n          \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n          )\r\n            .then(res => res.json())\r\n            .then(res =>\r\n              setWeatherData(prevArray => [\r\n                ...prevArray,\r\n                { res, showMoreStuff }\r\n              ])\r\n            )\r\n            .catch(err => {\r\n              console.error(err);\r\n            });\r\n          return null;\r\n        })\r\n      );\r\n    }\r\n    getWeather();\r\n  }, [initialQuery]);\r\n\r\n  // funct to return convert day and month from data\r\n  function getMyDay(day) {\r\n    const date1 = new Date(day);\r\n    const dayOfWeekIndex = date1.getDay();\r\n    const dayNames = [\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"];\r\n    return dayNames[dayOfWeekIndex];\r\n  }\r\n  function showAdded(i) {\r\n    const preItemToShow = [...itemToShow, i];\r\n    setItemToShow(preItemToShow);\r\n    const newItemShow = itemToShow.filter(item => item !== i);\r\n    setTimeout(() => {\r\n      setItemToShow(newItemShow);\r\n    }, 3500);\r\n  }\r\n\r\n  function getMyMonth(month) {\r\n    const month1 = new Date(month);\r\n    const dayOfMonthIndex = month1.getMonth();\r\n    const monthNames = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"Aug\",\r\n      \"Sept\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\"\r\n    ];\r\n    return monthNames[dayOfMonthIndex];\r\n  }\r\n  // add item to dashboard\r\n  const onAddItemClick = (item, user) => {\r\n    const newItem = {\r\n      name: item.res.title,\r\n      weathers: item,\r\n      newID: user._id\r\n    };\r\n    addItem(newItem);\r\n  };\r\n\r\n  // console.log(weatherData);\r\n  // console.log(initialQuery);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">Weather Hunter</h1>\r\n      {user && <div>You are logged in!</div>}\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n          placeholder=\"input city search\"\r\n          className=\"input-weather\"\r\n        />\r\n      </div>\r\n\r\n      <h3>Total found: {weatherData.length} </h3>\r\n      {initialQuery.length > 0 && weatherData.length !== initialQuery.length ? (\r\n        <img\r\n          src=\"https://media.giphy.com/media/l31p1SkNXGz3l1nwwu/giphy.gif\"\r\n          alt=\"loading\"\r\n          className=\"loading-gif\"\r\n        />\r\n      ) : (\r\n        <div className=\"all-weather-container\">\r\n          {/* map over queried data */}\r\n          {weatherData.map((item, i) => (\r\n            <div className=\"each-weather\" key={item.res.woeid}>\r\n              <div className=\"each-container\">\r\n                {isAuthenticated === true ? (\r\n                  <Button\r\n                    className=\"weather-button weather-save\"\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    onClick={() => {\r\n                      showAdded(i);\r\n                      onAddItemClick(item, user);\r\n                    }}\r\n                  >\r\n                    {itemToShow.includes(i) ? \"Saved\" : \"Add\"}\r\n                  </Button>\r\n                ) : (\r\n                  <div>Please login to save cities!</div>\r\n                )}\r\n                <br />\r\n                <h3 className=\"each-weather-title\" variant=\"h3\" component=\"h3\">\r\n                  {item.res.title}\r\n                </h3>\r\n                <h6>{item.res.timezone}</h6>\r\n                <h6>Time: {item.res.time.slice(11, 16)}</h6>\r\n                <hr />\r\n                {/* carousel for days of week weather */}\r\n                <Carousel interval={null}>\r\n                  <Carousel.Item>\r\n                    <h6>Today</h6>\r\n                    <img\r\n                      className=\"weather-image\"\r\n                      src={`https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[0].weather_state_abbr}.svg`}\r\n                      alt=\"weather state\"\r\n                    />\r\n                    <h6>\r\n                      {item.res.consolidated_weather[0].weather_state_name}\r\n                    </h6>\r\n                    <h6>\r\n                      {item.res.consolidated_weather[0].the_temp &&\r\n                        item.res.consolidated_weather[0].the_temp.toFixed(1)}\r\n                      C\r\n                    </h6>\r\n                    <h6>\r\n                      Predictability:{\" \"}\r\n                      {item.res.consolidated_weather[0].predictability &&\r\n                        item.res.consolidated_weather[0].predictability}\r\n                      %\r\n                    </h6>\r\n                  </Carousel.Item>\r\n                  {/* map */}\r\n                  {item.res.consolidated_weather.map((weather, i) => (\r\n                    <Carousel.Item className=\"show-more-each\" key={i}>\r\n                      {i === 0 ? (\r\n                        <h6>Tomorrow</h6>\r\n                      ) : (\r\n                        <h6>\r\n                          {getMyDay(\r\n                            item.res.consolidated_weather[i].applicable_date\r\n                          )}{\" \"}\r\n                          {parseInt(\r\n                            item.res.consolidated_weather[\r\n                              i\r\n                            ].applicable_date.slice(8, 10)\r\n                          ) < 10\r\n                            ? item.res.consolidated_weather[\r\n                                i\r\n                              ].applicable_date.slice(9, 10)\r\n                            : item.res.consolidated_weather[\r\n                                i\r\n                              ].applicable_date.slice(8, 10)}{\" \"}\r\n                          {getMyMonth(\r\n                            item.res.consolidated_weather[i].applicable_date\r\n                          )}\r\n                        </h6>\r\n                      )}\r\n                      <img\r\n                        className=\"weather-image\"\r\n                        src={`https://www.metaweather.com/static/img/weather/${item.res.consolidated_weather[i].weather_state_abbr}.svg`}\r\n                        alt=\"weather state\"\r\n                      />\r\n                      <h6>\r\n                        {item.res.consolidated_weather[i].weather_state_name}\r\n                      </h6>\r\n                      <h6>\r\n                        {item.res.consolidated_weather[i].the_temp &&\r\n                          item.res.consolidated_weather[i].the_temp.toFixed(1)}\r\n                        C\r\n                      </h6>\r\n                      <h6>\r\n                        Predictability:{\" \"}\r\n                        {item.res.consolidated_weather[i].predictability &&\r\n                          item.res.consolidated_weather[i].predictability}\r\n                        %\r\n                      </h6>\r\n                    </Carousel.Item>\r\n                  ))}\r\n                </Carousel>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  user: state.auth.user\r\n});\r\nexport default connect(mapStateToProps, { addItem })(WeatherList);\r\n"]},"metadata":{},"sourceType":"module"}